/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package VoltageControl;

import com.fazecast.jSerialComm.SerialPort;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/**
 *
 * @author Admin
 */
public class voltage extends javax.swing.JFrame {
    
    /**
     * Creates Title name
     * @return 
     */
    @Override
    public String getTitle() {
    return ("Graph Voltage");
    }
    
    /**
     * Creates new form voltage
     */
    public voltage() {
        initComponents();
    }
    
    public voltage(String pars){
        initComponents();
        
        filechosen.setText(pars);
        
        SerialPort[] portNames = SerialPort.getCommPorts();
        for(int i = 0; i < portNames.length; i ++)
            portList.addItem(portNames[i].getSystemPortName());
    }
    
    // same goes on with boolean,double,float,object ...


    
    static SerialPort chosenPort;
    static int x = 0;
    static int l = 0;
    
    static int X = 0;
    static int Y = 0;
    
    Scanner scanner;
    
    JSONArray jsonArray = new JSONArray();
    JSONObject jsonObject = new JSONObject();
    JSONArray jsonArray1 = new JSONArray();
    JSONObject jsonObject1 = new JSONObject();
    JSONArray jsonArray2 = new JSONArray();
    JSONObject jsonObject2 = new JSONObject();
    
    //////////////////////////////////////////////
    public static BufferedImage getScreenShot(Component component){
    BufferedImage image = new BufferedImage(component.getWidth(),component.getHeight(),BufferedImage.TYPE_INT_RGB);
    component.paint(image.getGraphics());
    return image;
    }
    /////////////////////////////////////////////////////
    public static void SaveScreenShot(Component component,String filename) throws Exception{
    BufferedImage img = getScreenShot(component );
    ImageIO.write(img,"png",new File(filename));
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        Run = new javax.swing.JButton();
        Clear = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        filechosen = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        portList = new javax.swing.JComboBox<>();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        PanelRead = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ImGraph = new javax.swing.JTextArea();
        graph = new javax.swing.JPanel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 204));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Instrumental");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Save All");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Graph Voltage");

        Run.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Run.setText("RUN");
        Run.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunActionPerformed(evt);
            }
        });

        Clear.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Clear.setText("CLEAR");
        Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Graph");

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setForeground(new java.awt.Color(255, 255, 255));
        jRadioButton3.setText("Read");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton4);
        jRadioButton4.setForeground(new java.awt.Color(255, 255, 255));
        jRadioButton4.setText("Plot");
        jRadioButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton4ActionPerformed(evt);
            }
        });

        filechosen.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        filechosen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filechosenActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("File Chosen");

        portList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portListActionPerformed(evt);
            }
        });

        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.RIGHT);
        jTabbedPane1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        ImGraph.setColumns(20);
        ImGraph.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ImGraph.setRows(5);
        jScrollPane1.setViewportView(ImGraph);

        javax.swing.GroupLayout PanelReadLayout = new javax.swing.GroupLayout(PanelRead);
        PanelRead.setLayout(PanelReadLayout);
        PanelReadLayout.setHorizontalGroup(
            PanelReadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 683, Short.MAX_VALUE)
        );
        PanelReadLayout.setVerticalGroup(
            PanelReadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 573, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Read", PanelRead);

        javax.swing.GroupLayout graphLayout = new javax.swing.GroupLayout(graph);
        graph.setLayout(graphLayout);
        graphLayout.setHorizontalGroup(
            graphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 683, Short.MAX_VALUE)
        );
        graphLayout.setVerticalGroup(
            graphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 573, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Plot", graph);

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Save", "Capture" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jButton1.setText("Add File");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea2.setBackground(new java.awt.Color(0, 102, 153));
        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane3.setViewportView(jTextArea2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jRadioButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jRadioButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(116, 116, 116))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(92, 92, 92))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(Run, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(Clear, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(10, 10, 10)
                                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addContainerGap()))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(19, 19, 19)
                                        .addComponent(jLabel3))
                                    .addComponent(filechosen, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(portList, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 950, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Run)
                    .addComponent(Clear))
                .addGap(18, 18, 18)
                .addComponent(portList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(jRadioButton3)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton4)
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(filechosen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60))
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunActionPerformed
        
    }//GEN-LAST:event_RunActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        String filename = filechosen.getText();  //URL of json file
        
        JSONParser parser = new JSONParser();
        
           try
           {
                Object obj = parser.parse(new FileReader(filename));
                System.out.println(filename);
                String rev = obj.toString();
                System.out.println(rev);
                JSONArray data = new JSONArray(rev);
                List list = new ArrayList();
			for(int i = 0; i < data.length(); i++){
		            JSONObject c = data.getJSONObject(i);
                            
                            list.add("\nx = " + c.get("x")+ "\ny = " + c.get("y")+ "\n=========================");
                            
                        } 
                
                String strList = list.toString();
                ImGraph.setText(strList.substring(1, strList.length()-1));
                ImGraph.requestFocus();
           }
            catch(IOException e) {
                JOptionPane.showMessageDialog(null,e);
            } catch (ParseException | JSONException ex) {
            Logger.getLogger(voltage.class.getName()).log(Level.SEVERE, null, ex);
        }
           
        setVisible(true);
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void filechosenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filechosenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filechosenActionPerformed

    private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton4ActionPerformed
        
        graph.setLayout(new BorderLayout());  
        JPanel topPanel = new JPanel();
        graph.add(topPanel,BorderLayout.NORTH ); 
       
        SerialPort[] portNames = SerialPort.getCommPorts();
        for(int i = 0; i < portNames.length; i ++)
            portList.addItem(portNames[i].getSystemPortName());
        
        // create the line graph
        XYSeries series = new XYSeries("Frist");
        XYSeries series2 = new XYSeries("Second");
        XYSeries series3 = new XYSeries("Third");
        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(series);
        dataset.addSeries(series2);
        dataset.addSeries(series3);
        
        JFreeChart chart = ChartFactory.createXYLineChart("", "Time", "Reading", dataset, PlotOrientation.VERTICAL, true, true, false);
        
        graph.add(new ChartPanel(chart),BorderLayout.BEFORE_LINE_BEGINS); /////////////////////////////
        
        ChartPanel ch = new ChartPanel(chart);
        XYPlot xyPlot = chart.getXYPlot();
        xyPlot.setDomainGridlinePaint(Color.white);
        xyPlot.setRangeGridlinePaint(Color.white);
        org.jfree.chart.axis.ValueAxis domainAxis = xyPlot.getDomainAxis();
        org.jfree.chart.axis.ValueAxis rangeAxis = xyPlot.getRangeAxis();
        
        XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();
        renderer.setSeriesLinesVisible(1, false);
        renderer.setSeriesShapesVisible(1, false);
        xyPlot.setRenderer(renderer);
        
        rangeAxis.setRange(0.0, 1100.0);
        rangeAxis.setAutoRangeMinimumSize(0.1); 
        
        
        JSONParser parser = new JSONParser();  //////////////////////
        String filename = filechosen.getText();  /////////////////////
        List XXX = new ArrayList(); /////////////////////////
        List YYY = new ArrayList();  ///////////////////////
        
        ////////////////////////////////////////////////
        List list = new ArrayList();
        if (filename != "") {
            
            Object obj;
            try {
                obj = parser.parse(new FileReader(filename));
                String rev = obj.toString();
                
                JSONArray data = new JSONArray(rev);
                
			for(int i = 0; i < data.length(); i++){
		            JSONObject c = data.getJSONObject(i);
                            
                            XXX.add(c.get("x"));
                            YYY.add(c.get("y"));
                            list.add("\nx = " + c.get("x")+ "\ny = " + c.get("y")+ "\n=========================");
                            
                        }
            
            } catch (FileNotFoundException ex) {
                Logger.getLogger(voltage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException | ParseException | JSONException ex) {
                Logger.getLogger(voltage.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            //System.out.println(XXX.size());
            
            for (int i = 0; i < XXX.size();i++) {
                 //System.out.println(XXX.get(i));
                 //System.out.println(YYY.get(i));
                X = (int) XXX.get(i);
                Y = (int) YYY.get(i);
                series.add(X,Y);
                System.out.println(X);
                System.out.println(Y);
                ch.repaint();
            }
        }
        
        
        
        //////////////////////////////////////////////
        
        
        //configure the connect button and use another thread to listen for data
        Run.addActionListener(new ActionListener(){
            @Override public void actionPerformed(ActionEvent arg0){
                
                if (Run.getText().equals("RUN")){
                //attemp to connect to the serial port    
                chosenPort = SerialPort.getCommPort(portList.getSelectedItem().toString());
                String s = portList.getSelectedItem().toString();
                
                chosenPort.setComPortTimeouts(SerialPort.TIMEOUT_SCANNER, 0, 0);
                if(chosenPort.openPort()){
                    Run.setText("Disconnect");
                    portList.setEnabled(false);
                }
                //create a new thread that listens for incoming text and populates the graph
                Thread thread = new Thread(){
                   @Override public void run()
                   {
                      try {
                      scanner = new Scanner(chosenPort.getInputStream());
                      int n = 1000;
                        while(scanner.hasNextLine()){
                            
                            try{
                               
                                String line = scanner.nextLine();
                                int number = Integer.parseInt(line);
                                x++;
                                if (l == 0){
                                    series.add(x, number); 
                                    
                                    
                                    l = l +1;
                                    System.out.print(number);
                                    jsonObject.put("x", x);
                                    jsonObject.put("y", number);
                                    jsonArray.put(jsonObject);
                                    
                                }
                                
                                
                                else if (l == 1){
                                    System.out.println(number);
                                    series2.add(x, number);
                                    l = l+1;
                                    
                                    jsonObject1.put("x", x);
                                    jsonObject1.put("y", number);
                                    jsonArray1.put(jsonObject1);
                                
                                }
                                else{
                                    System.out.println(number);
                                    series3.add(x, number);
                                    l = l-2;
                                
                                    jsonObject2.put("x", x);
                                    jsonObject2.put("y", number);
                                    jsonArray2.put(jsonObject2);
                                    
                                    
                                }
                                
                                ch.repaint();
                                    if (n < x){
                                    n = n+1000;
                                    domainAxis.setRange(x, n);
                                    //domainAxis.setAutoRangeMinimumSize(0.1);
                                    }
                                
                            } catch(NumberFormatException e){}
                        }
                        scanner.close();
                         } catch(Exception e){
                         System.err.println(e);}
                    }
                        
                };
                thread.start();
                }
                   else{
                    //disconnect form the serial port
                    chosenPort.closePort();
                    portList.setEnabled(true);
                    Run.setText("Run");
                    series.clear();
                    series2.clear();
                    series3.clear();
                    x = 0;
                    l = 0;
        
                    }
            
     }

        });
        
        graph.setVisible(true);
        
    }//GEN-LAST:event_jRadioButton4ActionPerformed

    private void ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearActionPerformed
        ImGraph.setText("");
        filechosen.setText("");
        
        graph.setLayout(new BorderLayout());  
        JPanel topPanel = new JPanel();
        graph.add(topPanel,BorderLayout.NORTH ); 
       
        SerialPort[] portNames = SerialPort.getCommPorts();
        for(int i = 0; i < portNames.length; i ++)
            portList.addItem(portNames[i].getSystemPortName());
        
        // create the line graph
        XYSeries series = new XYSeries("Frist");
        XYSeries series2 = new XYSeries("Second");
        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(series);
        dataset.addSeries(series2);
        
        
        JFreeChart chart = ChartFactory.createXYLineChart("", "Time", "Reading", dataset, PlotOrientation.VERTICAL, true, true, false);
        
        graph.add(new ChartPanel(chart),BorderLayout.BEFORE_LINE_BEGINS); /////////////////////////////
        
        ChartPanel ch = new ChartPanel(chart);
        XYPlot xyPlot = chart.getXYPlot();
        org.jfree.chart.axis.ValueAxis domainAxis = xyPlot.getDomainAxis();
        org.jfree.chart.axis.ValueAxis rangeAxis = xyPlot.getRangeAxis();
        
        rangeAxis.setRange(0.0, 1100.0);
        rangeAxis.setAutoRangeMinimumSize(0.1); 
        
        //configure the connect button and use another thread to listen for data
        Run.addActionListener(new ActionListener(){
            @Override public void actionPerformed(ActionEvent arg0){
                
                if (Run.getText().equals("RUN")){
                //attemp to connect to the serial port    
                chosenPort = SerialPort.getCommPort(portList.getSelectedItem().toString());
                String s = portList.getSelectedItem().toString();
                
                chosenPort.setComPortTimeouts(SerialPort.TIMEOUT_SCANNER, 0, 0);
                if(chosenPort.openPort()){
                    Run.setText("Disconnect");
                    portList.setEnabled(false);
                }
                //create a new thread that listens for incoming text and populates the graph
                Thread thread = new Thread(){
                   @Override public void run()
                   {
                      try {
                      scanner = new Scanner(chosenPort.getInputStream());
                      int n = 1000;
                        while(scanner.hasNextLine()){
                            
                            try{
                               
                                String line = scanner.nextLine();
                                int number = Integer.parseInt(line);
                                x++;
                                if (l == 0){
                                    series.add(x, 1023 - number);
                                    
                                    
                                    l = l +1;
                                }else{
                                    System.out.println(number);
                                    series2.add(x, number);
                                    l = l-1;}
                                
                                ch.repaint();
                                    if (n < x){
                                    n = n+1000;
                                    domainAxis.setRange(x, n);
                                    //domainAxis.setAutoRangeMinimumSize(0.1);
                                    }
                                       
                            } catch(NumberFormatException e){}
                        }
                        scanner.close();
                         } catch(Exception e){
                         System.err.println(e);}
                    }
                        
                };
                thread.start();
                }
                   else{
                    //disconnect form the serial port
                    chosenPort.closePort();
                    portList.setEnabled(true);
                    Run.setText("Run");
                    series.clear();
                    series2.clear();
                    x = 0;
                    l = 0;
        
                    }
            
     }

        });
        
        graph.setVisible(true);
    }//GEN-LAST:event_ClearActionPerformed

    private void portListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_portListActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        
        if (jComboBox2.getSelectedItem() == "Save"){
            System.out.println(jsonArray);
            JFileChooser save = new JFileChooser();
            save.setDialogTitle("Save a File");
            FileNameExtensionFilter json = new FileNameExtensionFilter("Json File","json");
            save.setFileFilter(json);
            int result = save.showSaveDialog(null);
            if(result == JFileChooser.APPROVE_OPTION){
                try(FileWriter fw = new FileWriter(save.getSelectedFile()+".json")) {
                    fw.write("\nGrap1 = "+jsonArray.toString());
                    fw.write("\nGrap2 = "+jsonArray1.toString());
                    fw.write("\nGrap3 = "+jsonArray2.toString());
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        }
        
        if (jComboBox2.getSelectedItem() == "Capture"){
            
            try{
                SaveScreenShot(graph,"Image.png");
            } catch (Exception ex) {
                Logger.getLogger(voltage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Add f = new Add();
        f.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(voltage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>
        //</editor-fold>
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new voltage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Clear;
    private javax.swing.JTextArea ImGraph;
    private javax.swing.JPanel PanelRead;
    public javax.swing.JButton Run;
    private javax.swing.ButtonGroup buttonGroup1;
    public javax.swing.JTextField filechosen;
    public javax.swing.JPanel graph;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea2;
    public javax.swing.JComboBox<String> portList;
    // End of variables declaration//GEN-END:variables
}
